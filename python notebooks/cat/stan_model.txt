data{
    int<lower=1> N;
    int notes[N];
    int cat[N];
}
parameters{
    real<lower=0> alpha;
    real<lower=0> beta;
}
model{
    vector[N] lambda;
    beta ~ exponential( 0.1 );
    alpha ~ exponential( 0.1 );
    for ( i in 1:N ) {
        lambda[i] = (1 - cat[i]) * alpha + cat[i] * beta;
    }
    notes ~ poisson( lambda );
}
generated quantities{
    vector[N] lambda;
    real dev;
    dev = 0;
    for ( i in 1:N ) {
        lambda[i] = (1 - cat[i]) * alpha + cat[i] * beta;
    }
    dev = dev + (-2)*poisson_lpmf( notes | lambda );
}


data{
    int<lower=1> N;
    int<lower=1> N_id;
    int notes[N];
    int cat[N];
    int id[N];
}
parameters{
    vector<lower=0>[N_id] alpha;
    vector<lower=0>[N_id] beta;
    real<lower=0> alpha_bar;
    real<lower=0> beta_bar;
}
model{
    vector[N] lambda;
    beta_bar ~ exponential( 0.1 );
    alpha_bar ~ exponential( 0.1 );
    for ( j in 1:N_id ) beta[j] ~ exponential( 1.0/beta_bar );
    for ( j in 1:N_id ) alpha[j] ~ exponential( 1.0/alpha_bar );
    for ( i in 1:N ) {
        lambda[i] = (1 - cat[i]) * alpha[id[i]] + cat[i] * beta[id[i]];
    }
    notes ~ poisson( lambda );
}
generated quantities{
    vector[N] lambda;
    real dev;
    dev = 0;
    for ( i in 1:N ) {
        lambda[i] = (1 - cat[i]) * alpha[id[i]] + cat[i] * beta[id[i]];
    }
    dev = dev + (-2)*poisson_lpmf( notes | lambda );
}


data{
    int N;
    int notes[N];
    int cat[N];
}
parameters{
    real<lower=0,upper=1> kappa;
    real<lower=0> beta;
    real<lower=0> alpha;
}
model{
    beta ~ exponential( 0.1 );
    alpha ~ exponential( 0.1 );
    kappa ~ beta( 4 , 4 );
    for ( i in 1:N ) {
        if ( cat[i]==-1 ) { // cat missing
            target += log_mix( kappa ,
                    poisson_lpmf( notes[i] | beta ),
                    poisson_lpmf( notes[i] | alpha )
                );
        } else { // cat not missing
            cat[i] ~ bernoulli(kappa);
            notes[i] ~ poisson( (1-cat[i])*alpha + cat[i]*beta );
        }
    }//i
}//model
generated quantities{
    vector[N] cat_impute;
    for ( i in 1:N ) {
        real logPxy;
        real logPy;
        if ( cat[i]==-1 ) {
            // need P(x|y)
            // P(x|y) = P(x,y)/P(y)
            // P(x,y) = P(x)P(y|x)
            // P(y) = P(x==1)P(y|x==1) + P(x==0)P(y|x==0)
            logPxy = log(kappa) + poisson_lpmf(notes[i]|beta);
            logPy = log_mix( kappa ,
                    poisson_lpmf( notes[i] | beta ),
                    poisson_lpmf( notes[i] | alpha ) );
            cat_impute[i] = exp( logPxy - logPy );
        } else {
            cat_impute[i] = cat[i];
        }
    }//i
}//gq

// static occupancy model
data {
    int N;
    int notes[N];
    int cat[N];
}
parameters {
    real<lower=0> beta;
    real<lower=0> alpha;
    real<lower=0,upper=1> kappa;    // prob cat present
    real<lower=0,upper=1> delta;    // prob of detecting cat
}
model {
    beta ~ exponential( 0.1 );
    alpha ~ exponential( 0.1 );
    kappa ~ beta(4,4);
    delta ~ beta(4,4);
    for ( i in 1:N ) {
        if ( cat[i]==1 )
            // cat present and detected
            target += log(kappa) + log(delta) + poisson_lpmf( notes[i] | beta );
        if ( cat[i]==0 ) {
            // cat not observed, but cannot be sure not there
            // marginalize over unknown cat state:
            // (1) cat present and not detected
            // (2) cat absent
            target += log_sum_exp(
                    log(kappa) + log1m(delta) + poisson_lpmf( notes[i] | beta ),
                    log1m(kappa) + poisson_lpmf( notes[i] | alpha ) );
        }//cat==0
    }//i
}
